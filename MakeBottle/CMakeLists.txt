CMAKE_MINIMUM_REQUIRED( VERSION 2.8 )

PROJECT( MakeBottle )

FIND_PACKAGE( OpenCASCADE REQUIRED )
# OCC_FOUND          - system has OCC - OpenCASCADE
# OCC_INCLUDE_DIR    - where the OCC include directory can be found
# OCC_LIBRARY_DIR    - where the OCC library directory can be found
# OCC_LIBRARIES      - Link this to use OCC
INCLUDE_DIRECTORIES( ${OCC_INCLUDE_DIR} )

SET( CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS} " -std=c++11" )

SET( SOURCES ${SOURCES} ${PROJECT_SOURCE_DIR}/MakeBottle.cpp )

ADD_EXECUTABLE( ${PROJECT_NAME} ${SOURCES} )
TARGET_LINK_LIBRARIES( ${PROJECT_NAME} ${OCC_LIBRARIES} )


SET( EMSCRIPTEN_TEST_DIR				${PROJECT_SOURCE_DIR}/../lib/ CACHE PATH "the path to copy the js file to (for EMSCRIPTEN only)" )
SET( EMSCRIPTEN_DEPLOYMENT_DIR	${PROJECT_SOURCE_DIR}/../lib/ CACHE PATH "the path to copy the Module.js file to (for EMSCRIPTEN only)" )

SET( EMSCRIPTEN_DIR ${PROJECT_SOURCE_DIR}/../external/emscripten )
SET( INCLUDE_DIRS ${INCLUDE_DIRS} ${EMSCRIPTEN_DIR} )

#unfortunately, automatic emscripten building doesn't work...
#so you have to compile 'by hand:'
SET( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-return-type" )
SET( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-c++11-compat-deprecated-writable-strings" )
#SET( CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS} "-s NO_EXIT_RUNTIME=1" )
#SET( CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS} "-s ALLOW_MEMORY_GROWTH=1" )
#SET( CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS} "-s -Oz" )
#SET( CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS} "-s EXPORTED_FUNCTIONS=" )
#INCLUDE_DIRECTORIES( ${INCLUDE_DIRS} )
#ADD_EXECUTABLE( nurbstool ${SOURCES} )

#check if build directory exists
IF( EXISTS "${CMAKE_CURRENT_BINARY_DIR}" AND IS_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}" )
	SET( PRECOMMAND "pushd ${PROJECT_SOURCE_DIR}; export PATH=$PATH:${EMSCRIPTEN_DIR}; export EMSCRIPTEN=${EMSCRIPTEN_DIR}" )

	# make sources inline
	SET( SOURCES_COPY ${SOURCES} )
    SET( SOURCES "" )
	FOREACH( SRC ${SOURCES_COPY} )
	    SET( SOURCES "${SOURCES} ${SRC}" )
	ENDFOREACH( SRC )

	FOREACH( DIR ${INCLUDE_DIRS} )
	    SET( INCLUDE_LINE "${INCLUDE_LINE} -I${DIR}" )
	ENDFOREACH( DIR )

	IF( NURBSTOOL_DEBUG )
		SET( FLAGS "${FLAGS} -DNURBSTOOL_DEBUG -DDEBUG" )
		SET( CREATE_MEM_FILE OFF )
		SET( FLAGS "${FLAGS} --memory-init-file 0" )
	ELSE()
		SET( FLAGS "${FLAGS} -O3" )
		#SET( FLAGS "${FLAGS} -g4" )
		SET( CREATE_MEM_FILE ON )
		SET( FLAGS "${FLAGS} --memory-init-file 1" )
	ENDIF()
	SET( FLAGS "${FLAGS} -std=c++11" )
	SET( FLAGS "${FLAGS} -s NO_EXIT_RUNTIME=1" )
	SET( FLAGS "${FLAGS} -s ALLOW_MEMORY_GROWTH=1" )
	SET( FLAGS "${FLAGS} -s EXPORTED_FUNCTIONS=\"[ '_main' ]\"" )
	SET( OUTPUT "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}.js" )

	SET( COMMAND "em++ ${SOURCES} ${INCLUDE_LINE} ${FLAGS} -o ${OUTPUT}" )

	MESSAGE( STATUS "unfortunately, building for emscripten doesn't work yet,\nuse the following line to compile 'by hand':\n\n" )
	MESSAGE( STATUS "${PRECOMMAND}; ${COMMAND}; ${POSTCOMMAND}" )

	SET( INSTALL_COMMAND "cp ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}.js ${EMSCRIPTEN_TEST_DIR}/")
	SET( INSTALL_COMMAND "${INSTALL_COMMAND}; cp ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}.js ${EMSCRIPTEN_DEPLOYMENT_DIR}/Module.js" )

	IF( ${CREATE_MEM_FILE} )
		SET( INSTALL_COMMAND "${INSTALL_COMMAND}; cp ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}.js.mem ${EMSCRIPTEN_TEST_DIR}/")
		SET( INSTALL_COMMAND "${INSTALL_COMMAND}; cp ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}.js.mem ${EMSCRIPTEN_DEPLOYMENT_DIR}/Module.js.mem")
	ENDIF()
	MESSAGE( STATUS "\nand to install:\n\n" )
	MESSAGE( STATUS "${INSTALL_COMMAND}" )

	MESSAGE( STATUS "\n\n" )
ELSE()
	MESSAGE( "the build directory ${CMAKE_CURRENT_BINARY_DIR} does not exist. exit." )
ENDIF()


